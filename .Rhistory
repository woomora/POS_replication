getwd()
# ------------------------------------------------------------------------------
# ---- Setup: Workspace and Library Loading ----
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# Clear existing workspace
rm(list = ls())
# 'pacman' simplifies loading and managing R packages. The p_load function
# installs the packages if they are not already installed and then loads them.
library(pacman)
p_load(
tidyverse,      # Core packages for data manipulation and visualization
readr,          # Read data from text files
janitor,        # Data cleaning
lubridate,      # Date handling
panelView,      # Panel data visualization
fixest,         # Econometric modeling for panel data
countrycode,    # Country code conversion
scpi,           # Synthetic control methods
imputeTS,       # Time series imputation
synthdid,       # Difference-in-differences with synthetic control
modelsummary,   # Model summaries and visualizations
readxl,         # Excel file reading
ggnewscale,     # Add multiple scales to ggplot2
ggthemes,       # Additional ggplot2 themes
pracma,         # Practical mathematical functions
tsibble,        # Time series data frame structure
feasts,         # Time series decomposition
fabletools,     # Time series forecasting tools
lpirfs,         # Local projection impulse response functions
vdemdata,       # Loads the V-Dem dataset, providing data on democracy indicators across the world
zoo,            # Time series objects
binsreg,        # Binned scatterplots for regression analysis
knitr,          # Dynamic report generation in R
httr,           # Tools for working with HTTP, useful for API calls and web requests
readxl          # Read Excel files into R
)
# Set working directory to the appropriate project path
path <- getwd()
# Define and set a clean theme for all plots using ggthemes and additional customization
theme_clean <-
ggthemes::theme_clean() +
theme(
legend.position = "bottom",
plot.background = element_rect(fill = "white", color = NA), # Set plot background to white
panel.background = element_rect(fill = "white", color = NA), # Set panel background to white
legend.background = element_rect(fill = "white", color = NA), # Set legend background to white
)
theme_set(theme_clean)
# Define a custom color for plotting (used later in your plots)
color4t <- '#a83232'
# Key political and event-related dates used for analysis
amlo_vic_date <- ymd("2018-07-01")      # AMLO victory date
amlo_vic_quarter <- 2018.3              # AMLO victory quarter
naim_ref_anouncement <- ymd("2018-08-21")  # Announcement date of NAIM referendum
naim_canc_date <- ymd("2018-10-29")        # NAIM cancelation date
naim_canc_quarter <- 2018.4                # NAIM cancelation quarter
amlo_gov_date <- ymd("2018-12-01")         # AMLO government start date
amlo_gov_quarter <- 2018.4                 # AMLO government start quarter
covid_date <- ymd("2020-02-01")            # Start of COVID-19 pandemic
covid_quarter <- 2020.1                    # COVID-19 quarter
# Set the system locale to English (US) to prevent issues with special characters
Sys.setlocale("LC_ALL", "en_US.UTF-8")
# Source custom functions for synthetic control analysis from a separate script
source("scripts/POS_functions.R")
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# ---- Data ----
# ------------------------------------------------------------------------------
# Check "scripts/POS_data.R" to see the construction of derived data from source
source("scripts/POS_data.R")
# Define the treatment date (NAIM cancellation)
time.tr <- "2018-10-29"
time.tr.date <- ymd(time.tr)
# Define the time window around the treatment (7 days before and after)
days <- 7
# ------------------------------------------------------------------------------
# Data Preparation ----
# Filter the data for the currencies and date range of interest
bis_xr_foo <-
bis_xr |>
# Remove 'eur_euro' and 'cad_canadian_dollar' from the analysis
filter(!(currency %in% c("eur_euro", "cad_canadian_dollar"))) |>
# Filter the dataset to include only the 7 days before and after the NAIM cancellation
filter(date >= time.tr.date - days  & date <= time.tr.date + days) |>
group_by(currency) |>
# Mutate the data to add necessary columns for analysis
mutate(
# Take the natural logarithm of the exchange rate for easier interpretation of results
lexr = log(exr),
# Calculate the time relative to the treatment date (in days)
time_to_treat = lubridate::interval(ymd(time.tr.date), date) %/% days(1),
# Define a treatment indicator: 1 if MXN after NAIM cancellation, 0 otherwise
treatment = if_else(currency == "mxn_mexican_peso" & date >= time.tr.date, 1, 0)
) |>
ungroup()
# ------------------------------------------------------------------------------
# Setup for Synthetic DID ----
# Create a panel matrix required for the SDID estimation
setup =
bis_xr_foo |>
# Select relevant columns (currency, time to treatment, log of exchange rate, and treatment)
select(currency, time_to_treat, lexr, treatment) |>
data.frame() |>
# Create matrices for panel estimation
panel.matrices()
# ------------------------------------------------------------------------------
# Synthetic DID Estimation ----
# Estimate the treatment effect using the SDID method
tau.hat = synthdid_estimate(setup$Y, setup$N0, setup$T0)
# Set seed for reproducibility of standard errors
set.seed(123)
# Calculate the standard error using the placebo method
se = sqrt(vcov(tau.hat, method='placebo'))
# Extract the estimated treatment effect and standard error
ex_estimate <- tau.hat[1]
ex_se <- se[1,1]
# ------------------------------------------------------------------------------
# Plotting the Results ----
# Create a plot to visualize the Synthetic DID results
synthdid_plot(
tau.hat, overlay = .999, trajectory.alpha = 1,  # Control the overlay and transparency of the trajectories
control.name = 'Synthetic MXN',                # Name for the synthetic control group
treated.name = 'MXN'                           # Name for the treated group (MXN)
) +
# Label the axes
labs(x = "Relative time to NAIM's cancellation (days)",
y = "MXN to USD (log)") +
# Add an annotation for the treatment effect estimate and its standard error
annotate(
"text", x = -0.5, y = -Inf,
hjust = 0, vjust = -0.5,
color = color4t, size = 3,
label = str_c("Estimate:\n", round(c(tau.hat), 3), " (", round(c(se), 3), ")")
) +
# Customize the x-axis breaks (show days -7 to 7)
scale_x_continuous(breaks = seq(-7, 7)) +
# Customize the color of the plot lines
scale_color_manual(values = c("black", color4t)) +
# Apply a clean theme
ggthemes::theme_clean() +
theme(
legend.position = "bottom",               # Move the legend to the bottom of the plot
legend.text = element_text(size = 10),    # Adjust legend text size
axis.title = element_text(size = 9),      # Adjust axis title text size
plot.background = element_rect(fill = "white", color = "white"),  # Set plot background
legend.background = element_rect(color = NA) # Set legend background
)
# ------------------------------------------------------------------------------
# Saving the Plot (optional) ----
# Uncomment the following lines to save the plot as a PNG file
ggsave(
"results/Fig1/Fig1.png", # File path to save the plot
dpi = 300,                                     # Resolution (DPI)
width = 7.4, height = 4.8                      # Plot dimensions
)
# ------------------------------------------------------------------------------
# ---- Setup: Workspace and Library Loading ----
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# Clear existing workspace
rm(list = ls())
# 'pacman' simplifies loading and managing R packages. The p_load function
# installs the packages if they are not already installed and then loads them.
library(pacman)
p_load(
tidyverse,      # Core packages for data manipulation and visualization
readr,          # Read data from text files
janitor,        # Data cleaning
lubridate,      # Date handling
panelView,      # Panel data visualization
fixest,         # Econometric modeling for panel data
countrycode,    # Country code conversion
scpi,           # Synthetic control methods
imputeTS,       # Time series imputation
synthdid,       # Difference-in-differences with synthetic control
modelsummary,   # Model summaries and visualizations
readxl,         # Excel file reading
ggnewscale,     # Add multiple scales to ggplot2
ggthemes,       # Additional ggplot2 themes
pracma,         # Practical mathematical functions
tsibble,        # Time series data frame structure
feasts,         # Time series decomposition
fabletools,     # Time series forecasting tools
lpirfs,         # Local projection impulse response functions
vdemdata,       # Loads the V-Dem dataset, providing data on democracy indicators across the world
zoo,            # Time series objects
binsreg,        # Binned scatterplots for regression analysis
knitr,          # Dynamic report generation in R
httr,           # Tools for working with HTTP, useful for API calls and web requests
readxl          # Read Excel files into R
)
# Set working directory to the appropriate project path
path <- getwd()
# Define and set a clean theme for all plots using ggthemes and additional customization
theme_clean <-
ggthemes::theme_clean() +
theme(
legend.position = "bottom",
plot.background = element_rect(fill = "white", color = NA), # Set plot background to white
panel.background = element_rect(fill = "white", color = NA), # Set panel background to white
legend.background = element_rect(fill = "white", color = NA), # Set legend background to white
)
theme_set(theme_clean)
# Define a custom color for plotting (used later in your plots)
color4t <- '#a83232'
# Key political and event-related dates used for analysis
amlo_vic_date <- ymd("2018-07-01")      # AMLO victory date
amlo_vic_quarter <- 2018.3              # AMLO victory quarter
naim_ref_anouncement <- ymd("2018-08-21")  # Announcement date of NAIM referendum
naim_canc_date <- ymd("2018-10-29")        # NAIM cancelation date
naim_canc_quarter <- 2018.4                # NAIM cancelation quarter
amlo_gov_date <- ymd("2018-12-01")         # AMLO government start date
amlo_gov_quarter <- 2018.4                 # AMLO government start quarter
covid_date <- ymd("2020-02-01")            # Start of COVID-19 pandemic
covid_quarter <- 2020.1                    # COVID-19 quarter
# Set the system locale to English (US) to prevent issues with special characters
Sys.setlocale("LC_ALL", "en_US.UTF-8")
# Source custom functions for synthetic control analysis from a separate script
source("scripts/POS_functions.R")
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# ---- Data ----
# ------------------------------------------------------------------------------
# Check "scripts/POS_data.R" to see the construction of derived data from source
source("scripts/POS_data.R")
monindex |> group_by(countrycode)
# Filter and transform the data for the falsification test
foo <-
monindex |>
mutate(eaindex_trend = log(eaindex_trend)) |>  # Log-transform the economic activity index
filter(date <= ymd("2020-01-01")) |>  # Include data up to January 2020
filter(countrycode != "MEX") |>  # Exclude Mexico as the treatment country
filter(!is.na(eaindex_trend))  # Remove missing data
# Define the treatment and pre/post-treatment periods
period.labels <- as.character(levels(factor(foo$date)))
period <- yearmonth(levels(factor(foo$year_month)))
time.tr <- yearmonth("2018 Oct")  # Define the treatment date (NAIM cancellation)
period.pre <- period[-c(match(time.tr, period):length(period))]  # Pre-treatment period
period.post <- period[c(match(time.tr, period):length(period))]  # Post-treatment period
# Add a time-to-treatment variable to the dataset
foo <-
foo |>
group_by(countrycode) |>
mutate(
time_to_treat_naim = c(seq(-length(period.pre), -1), seq(0, length(period.post) -1)),
treat = if_else(time_to_treat_naim >= 0, 1, 0)  # Binary treatment indicator
) |>
ungroup()
period <- as.numeric(levels(factor(foo$time_to_treat_naim)))  # Convert period to numeric
u.alpha  <- 0.05                         # Confidence level for in-sample uncertainty
e.alpha  <- 0.1                          # Confidence level for out-of-sample uncertainty
rho      <- NULL                         # Regularization parameter (auto-estimated if NULL)
rho.max  <- 1                            # Maximum value for regularization parameter
V        <- NULL                         # Weighting matrix (identity if NULL)
u.order  <- 1                            # Degree of polynomial for modeling u
u.lags   <- 0                            # Lags for u in the model
u.sigma  <- "HC2"                        # Estimator for variance-covariance of u
u.missp  <- TRUE                         # Treat the model as misspecified
e.lags   <- 1                            # Degree of polynomial for modeling e
e.order  <- 0                            # Lags for e in the model
e.method <- "all"                        # Method for estimating out-of-sample uncertainty
cores    <- parallel::detectCores()      # Number of cores for parallel processing
sims     <- 1000                         # Number of simulations
w.constr <- list(name = "simplex")       # Simplex-type constraint set
time.tr <- 0  # Time of treatment (relative to time_to_treat_naim)
id.var      <- "countrycode"                   # ID variable (country code)
time.var    <- "time_to_treat_naim"            # Time variable (relative to treatment)
period.pre  <- period[-c(match(time.tr, period):length(period))]  # Pre-treatment period
period.post <- period[c(match(time.tr, period):length(period))]   # Post-treatment period
outcome.var <- "eaindex_trend"                 # Outcome variable (economic activity trend)
cov.adj     <- NULL                            # No additional covariates
features    <- NULL                            # No extra features other than the outcome
constant    <- TRUE                            # Include a constant term
report.missing <- FALSE                        # Do not report missing values
cointegrated.data <- TRUE                      # Assume cointegrated data for time series
# Read weights and select the top 2 contributing countries
weights <-
read_csv("results/Fig4/scpi_weights.csv") |>
arrange(-weights)
