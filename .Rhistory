if (!requireNamespace("vdemdata", quietly = TRUE)) {
devtools::install_github("vdeminstitute/vdemdata")
}
# Load GitHub packages explicitly
library(synthdid)
library(vdemdata)
# Set working directory to the appropriate project path
path <- getwd()
# ---- Plotting Theme
# Define and set a clean theme for all plots using ggthemes and additional customization
theme_clean <-
ggthemes::theme_clean() +
theme(
legend.position = "bottom",
plot.background = element_rect(fill = "white", color = NA), # Set plot background to white
panel.background = element_rect(fill = "white", color = NA), # Set panel background to white
legend.background = element_rect(fill = "white", color = NA), # Set legend background to white
)
theme_set(theme_clean)
# Define a custom color for plotting (used later in your plots)
color4t <- '#a83232'
# ---- Important Dates and Periods
# Key political and event-related dates used for analysis
amlo_vic_date <- ymd("2018-07-01")      # AMLO victory date
amlo_vic_quarter <- 2018.3              # AMLO victory quarter
naim_ref_anouncement <- ymd("2018-08-21")  # Announcement date of NAIM referendum
naim_canc_date <- ymd("2018-10-29")        # NAIM cancelation date
naim_canc_quarter <- 2018.4                # NAIM cancelation quarter
amlo_gov_date <- ymd("2018-12-01")         # AMLO government start date
amlo_gov_quarter <- 2018.4                 # AMLO government start quarter
covid_date <- ymd("2020-02-01")            # Start of COVID-19 pandemic
covid_quarter <- 2020.1                    # COVID-19 quarter
# Set the system locale to English (US) to prevent issues with special characters
Sys.setlocale("LC_ALL", "en_US.UTF-8")
# ---- Load External Functions
# Source custom functions for synthetic control analysis from a separate script
source("scripts/POS_functions.R")
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# ---- Data ----
# ------------------------------------------------------------------------------
# Check "scripts/POS_data.R" to see the construction of derived data from source
source("scripts/POS_data.R")
file.exists("results/Fig2/falsification_synthdid.csv")
# Generate a sequence of dates from Jan 8, 2018, to Apr 1, 2020 (in 1-day increments)
dates <-
tibble(
dates = seq(ymd("2018-01-08"), ymd("2020-04-01"), by = "1 day")
) |>
mutate(
# Filter for Mondays, Wednesdays, and Fridays
weekday = weekdays(dates)
) |>
filter(weekday %in% c("Monday", "Wednesday", "Friday"))
dates
# Initialize an empty tibble to store falsification results
falsification_dates <- tibble()
levels(factor(dates$dates))
d = levels(factor(dates$dates))[1]
print(d)  # Print current date for tracking progress
# Set up the treatment date for the current iteration
time.tr <- d
time.tr.date <- ymd(time.tr)
days <- 7  # Define a 7-day window before and after the treatment
bis_xr
# Filter the BIS exchange rate data for the 7-day window around the current date
bis_xr_foo <-
bis_xr |>
filter(date >= time.tr.date - days  & date <= time.tr.date + days) |>
mutate(
# Log of the exchange rate
lexr = log(exr),
# Time to treatment, measured in days from the treatment date
time_to_treat = lubridate::interval(ymd(time.tr.date), date) %/% days(1),
# Define treatment variable (1 if MXN on/after treatment date, else 0)
treatment = if_else(mxn == 1 & date >= time.tr.date, 1, 0)
)
table(bis_xr$currency)
# Filter the BIS exchange rate data for the 7-day window around the current date
bis_xr_foo <-
bis_xr |>
filter(date >= time.tr.date - days  & date <= time.tr.date + days) |>
mutate(
# Log of the exchange rate
lexr = log(exr),
# Time to treatment, measured in days from the treatment date
time_to_treat = lubridate::interval(ymd(time.tr.date), date) %/% days(1),
# Define treatment variable (1 if mxn_mexican_peso on/after treatment date, else 0)
treatment = if_else(currency == "mxn_mexican_peso" & date >= time.tr.date, 1, 0)
)
# Prepare data for Synthetic DID analysis
setup <-
bis_xr_foo |>
select(currency, time_to_treat, lexr, treatment) |>
data.frame() |>
panel.matrices()
# Estimate treatment effect using Synthetic DID
tau.hat <- synthdid_estimate(setup$Y, setup$N0, setup$T0)
# Set seed for reproducibility of standard errors
set.seed(123)
# Calculate standard errors using the placebo method
se <- sqrt(vcov(tau.hat, method = 'placebo'))
# Append the results for the current date to the falsification_dates tibble
falsification_dates <-
falsification_dates |>
bind_rows(
tibble(
date = ymd(d),
estimate = tau.hat[,1],
se = se[1,1],
tvalue = estimate / se,
falsf = 1
)
)
plot(tau.hat)
# Run the falsification process only if the derived dataset does not already exist
if (!file.exists("results/Fig2/falsification_synthdid.csv")) {
# ------------------------------------------------------------------------------
# Falsification for each three days
# ------------------------------------------------------------------------------
# Generate a sequence of dates from Jan 8, 2018, to Apr 1, 2020 (in 1-day increments)
dates <-
tibble(
dates = seq(ymd("2018-01-08"), ymd("2020-04-01"), by = "1 day")
) |>
mutate(
# Filter for Mondays, Wednesdays, and Fridays
weekday = weekdays(dates)
) |>
filter(weekday %in% c("Monday", "Wednesday", "Friday"))
# Initialize an empty tibble to store falsification results
falsification_dates <- tibble()
# Loop over each date in the filtered 'dates' tibble
for (d in levels(factor(dates$dates))) {
print(d)  # Print current date for tracking progress
# Set up the treatment date for the current iteration
time.tr <- d
time.tr.date <- ymd(time.tr)
days <- 7  # Define a 7-day window before and after the treatment
# Filter the BIS exchange rate data for the 7-day window around the current date
bis_xr_foo <-
bis_xr |>
filter(date >= time.tr.date - days  & date <= time.tr.date + days) |>
mutate(
# Log of the exchange rate
lexr = log(exr),
# Time to treatment, measured in days from the treatment date
time_to_treat = lubridate::interval(ymd(time.tr.date), date) %/% days(1),
# Define treatment variable (1 if mxn_mexican_peso on/after treatment date, else 0)
treatment = if_else(currency == "mxn_mexican_peso" & date >= time.tr.date, 1, 0)
)
# Prepare data for Synthetic DID analysis
setup <-
bis_xr_foo |>
select(currency, time_to_treat, lexr, treatment) |>
data.frame() |>
panel.matrices()
# Estimate treatment effect using Synthetic DID
tau.hat <- synthdid_estimate(setup$Y, setup$N0, setup$T0)
# Set seed for reproducibility of standard errors
set.seed(123)
# Calculate standard errors using the placebo method
se <- sqrt(vcov(tau.hat, method = 'placebo'))
# Append the results for the current date to the falsification_dates tibble
falsification_dates <-
falsification_dates |>
bind_rows(
tibble(
date = ymd(d),
estimate = tau.hat[,1],
se = se[1,1],
tvalue = estimate / se,
falsf = 1
)
)
}
# ------------------------------------------------------------------------------
# Finalize falsification results by calculating confidence intervals and p-values
falsification_dates <-
falsification_dates |>
mutate(
# 95% confidence intervals
lci = estimate - 1.96 * se,
uci = estimate + 1.96 * se,
# t-value and p-value
tvalue = estimate / se,
pvalue = 2 * pt(q = abs(tvalue), df = 120, lower = F),
# Classify the treatment window around the NAIM cancellation
naim_canc_week = case_when(
date %in% seq(ymd("2018-10-29") - 14, ymd("2018-10-29") + 14, by = "day") ~ "NAIM Cancelation week",
TRUE ~ "Alternative date"
),
# Define the type of effect based on p-value significance
type = case_when(
pvalue <= .05 & naim_canc_week == "Alternative date" ~ "Alternative date",
pvalue <= .05 & naim_canc_week == "NAIM Cancelation week" ~ "NAIM Cancelation week",
pvalue > .05 ~ "Non-significant effect"
)
)
# Write the falsification results to a CSV file
write_csv(falsification_dates, "Results/Fig2/falsification_synthdid.csv")
}
# ------------------------------------------------------------------------------
# Falsification Plot ----
# ------------------------------------------------------------------------------
# Read in the derived falsification data
falsification_dates <-
read_csv("results/Fig2/falsification_synthdid.csv") |>
# Filter to remove dates after February 2020
filter(date <= ymd("2020-02-01")) |>
mutate(
# Re-classify the 'type' variable for the plot
type = case_when(
pvalue <= 0.05 & naim_canc_week == "Alternative date" ~ "Alternative date",
pvalue <= 0.05 & naim_canc_week == "NAIM Cancelation week" ~ "NAIM Cancelation week",
pvalue > 0.05 ~ "Non-significant effect"
)
)
# ------------------------------------------------------------------------------
# Create the plot ----
# Set up the base plot
p <-
ggplot() +
geom_hline(yintercept = 0) +  # Add a horizontal line at y = 0
coord_cartesian(ylim = c(-.05, 0.05)) +  # Set y-axis limits
scale_x_date(  # Customize the x-axis
breaks =  seq(ymd("2018-01-01"), ymd("2020-03-01"), by = "1 day"),
date_breaks = "1 months",
date_labels = "%b %y"
) +
labs(x = "", y = "Synth-DID Estimate (log-points)") +  # Label the axes
# Add vertical lines and annotations for key events
geom_vline(xintercept = ymd("2018-03-30"), linetype = "dashed", alpha = .5, lwd = .2) +
annotate("text", x = ymd("2018-03-30"), label = "Electoral process begins", y = -0.05, angle = 90, size = 2, vjust = 0, hjust = -0.05) +
geom_vline(xintercept = amlo_vic_date, linetype = "dashed", alpha = .5, lwd = .2) +
annotate("text", x = amlo_vic_date, label = "Elections", y = -0.05, angle = 90, size = 2, vjust = 0, hjust = -0.05) +
geom_vline(xintercept = naim_ref_anouncement, linetype = "dashed", alpha = .5, lwd = .2) +
annotate("text", x = naim_ref_anouncement, label = "Referendum announcement", y = -0.05, angle = 90, size = 2, vjust = 0, hjust = -0.05) +
geom_vline(xintercept = naim_canc_date, linetype = "dashed", alpha = .5, lwd = .2) +
annotate("text", x = naim_canc_date, label = "NAIM Cancelation", y = -0.05, angle = 90, size = 2, vjust = 0, hjust = -0.05) +
geom_vline(xintercept = amlo_gov_date, linetype = "dashed", alpha = .5, lwd = .2) +
annotate("text", x = amlo_gov_date, label = "President in office", y = -0.05, angle = 90, size = 2, vjust = 0, hjust = -0.05) +
geom_vline(xintercept = ymd("2019-06-19"), linetype = "dashed", alpha = .5, lwd = .2) +
annotate("text", x = ymd("2019-06-19"), label = "USMCA ratification", y = -0.05, angle = 90, size = 2, vjust = 0, hjust = -0.05)
# Add the data points and error bars for falsification dates
p +
# Non-significant effects
geom_point(data = falsification_dates |> filter(type == "Non-significant effect"), aes(x = date, y = estimate), alpha = .05, size = 1.5) +
geom_linerange(data = falsification_dates |> filter(type == "Non-significant effect"), aes(x = date, ymin = lci, ymax = uci), alpha = .05, lwd = .2) +
# Alternative dates with significant effects
geom_point(data = falsification_dates |> filter(type == "Alternative date"), aes(x = date, y = estimate), alpha = .5, size = .9, color = "black") +
geom_linerange(data = falsification_dates |> filter(type == "Alternative date"), aes(x = date, ymin = lci, ymax = uci), alpha = .5, lwd = .25, color = "black") +
# NAIM cancellation week with significant effects
geom_linerange(data = falsification_dates |> filter(type == "NAIM Cancelation week"), aes(x = date, ymin = lci, ymax = uci), lwd = .25, color = color4t) +
geom_point(data = falsification_dates |> filter(type == "NAIM Cancelation week"), aes(x = date, y = estimate), alpha = 1, size = 1, color = color4t) +
# Customize axis text
theme(
axis.text.y = element_text(size = 8),
axis.text.x = element_text(size = 6, angle = 90)
)
# ------------------------------------------------------------------------------
# Saving the Plot (optional) ----
# Uncomment the following lines to save the plot as a PNG file
ggsave(
"results/Fig2/Fig2.png", # File path to save the plot
dpi = 300,                                     # Resolution (DPI)
width = 7.4, height = 4.8                      # Plot dimensions
)
# Define file paths for the output results
scpi_estimates_file <- "results/Fig4/scpi_estimates.csv"
scpi_inference_file <-"results/Fig4/scpi_inference.csv"
scpi_weights_file <- "results/Fig4/scpi_weights.csv"
file.exists(scpi_estimates_file)
foo <-
monindex |>
mutate(eaindex_trend = log(eaindex_trend)) |>  # Log transformation of the economic activity index
filter(date <= ymd("2020-01-01")) |>           # Filter for the time period up to January 2020
filter(countrycode %in% c("ARG", "BRA", "CHL", "COL", "CRI", "HND", "ECU", "MEX", "USA", "CAN")) |>
filter(!is.na(eaindex_trend))                  # Exclude rows with missing values
# Define time periods
period.labels <- as.character(levels(factor(foo$date)))
period <- yearmonth(levels(factor(foo$year_month)))
time.tr <- yearmonth("2018 Oct")                 # Treatment period (NAIM cancellation)
period.pre <- period[-c(match(time.tr, period):length(period))]   # Pre-treatment period
period.post <- period[c(match(time.tr, period):length(period))]   # Post-treatment period
period.labels.post <- period.labels[c(match(time.tr, period):length(period))]
# Prepare the data for SCM
foo <-
foo |>
group_by(countrycode) |>
mutate(
time_to_treat_naim = c(seq(-length(period.pre), -1), seq(0, length(period.post) -1)),
treat = if_else(time_to_treat_naim >= 0, 1, 0)  # Define treatment indicator
) |>
ungroup() |>
glimpse()
period <- as.numeric(levels(factor(foo$time_to_treat_naim)))
time.tr <- 0  # Time of treatment
id.var      <- "countrycode"                      # ID variable
time.var    <- "time_to_treat_naim"               # Time variable (relative to treatment)
period.pre  <- period[-c(match(time.tr, period):length(period))]  # Pre-treatment period
period.post <- period[c(match(time.tr, period):length(period))]   # Post-treatment period
unit.tr     <- "MEX"                              # Treated unit (Mexico)
unit.co     <- unique(foo$countrycode)[-match("MEX", unique(foo$countrycode))]  # Donor pool
outcome.var <- "eaindex_trend"                    # Outcome variable (economic activity index trend)
cov.adj     <- NULL                               # No additional covariates for adjustment
features    <- NULL                               # No extra features other than outcome
constant    <- TRUE                               # Include a constant term in the model
report.missing <- FALSE                           # Do not report missing values
cointegrated.data <- TRUE                         # Assume data are cointegrated (for time series)
# Data preparation for SCM
df <- scdata(
df = foo, id.var = id.var, time.var = time.var, outcome.var = outcome.var,
period.pre = period.pre, period.post = period.post,
unit.tr = unit.tr, unit.co = unit.co, cov.adj = cov.adj, features = features,
constant = constant, cointegrated.data = cointegrated.data
)
# Synthetic Control Method options
u.alpha  <- 0.05
e.alpha  <- 0.1
rho      <- NULL
rho.max  <- 1
V        <- NULL
u.order  <- 1
u.lags   <- 0
u.sigma  <- "HC2"
u.missp  <- TRUE
e.lags   <- 1
e.order  <- 0
e.method <- "all"
lgapp    <- "linear"
cores    <- parallel::detectCores()
sims     <- 1000
w.constr <- list(name = "simplex")   # Simplex-type constraint for SCM weights
set.seed(1234)
model <- scpi(
w.constr = w.constr, data = df, u.order = u.order, u.lags = u.lags, u.sigma = u.sigma,
u.missp = u.missp, sims = sims, e.order = e.order, e.lags = e.lags, e.method = e.method,
cores = cores, u.alpha = u.alpha, e.alpha = e.alpha, rho = rho, rho.max = rho.max
)
# Plot the SCM results
scplot(model)
# Extract estimates and save them
scpi_estimates <- sc_est(model, "eaindex_trend", period, period.labels)
write_csv(scpi_estimates, "results/Fig4/scpi_estimates.csv")
# Extract inference results and save them
scpi_inference <- sc_inf(model, post_tr = period.post, period_labels = period.labels)
write_csv(scpi_inference, "results/Fig4/scpi_inference.csv")
# Extract SCM weights and save them
weights <- tibble(
weights = round(model$est.results$w, 4),
country = str_remove(names(model$est.results$w), "MEX.")
)
write_csv(weights, "results/Fig4/scpi_weights.csv")
# ------------------------------------------------------------------------------
# Read data for plots and calculations
# ------------------------------------------------------------------------------
# Estimates
scpi_estimates <- read_csv("results/Fig4/scpi_estimates.csv")
# Inference
scpi_inference <- read_csv("results/Fig4/scpi_inference.csv")
# Calculate MSE (Mean Squared Error)
mse <-
scpi_estimates |>
filter(name == "diff") |>
mutate(
mse = value^2
)
mse_pre <- (mse |> filter(time_to_treat < 0) |> summarise(mse = sum(mse)))$mse
mse_post <- (mse |> filter(time_to_treat >= 0) |> summarise(mse = sum(mse)))$mse
# Calculate RMSE (Root Mean Squared Error)
rmse_pre <- sqrt(mse_pre / (nrow(mse |> filter(time_to_treat < 0)) + 1))
rmse_post <- sqrt(mse_post / (nrow(mse |> filter(time_to_treat >= 0)) + 1))
# Ratio of post-treatment to pre-treatment RMSE
ratio <- rmse_post / rmse_pre
# ------------------------------------------------------------------------------
# Create SCM Plots Based on Results
# ------------------------------------------------------------------------------
# Define min and max for the y-axis
min_y <- exp(min((scpi_estimates |> filter(name == "obs"))$value))
max_y <- exp(round(max((scpi_inference$uci))))
# Prepare data for the plots
foo <- scpi_estimates |>
filter(!(name %in% c("diff", "lci", "uci"))) |>
mutate(
name = if_else(name == "obs", "Observed Mexico", "Synthetic Mexico"),
date = ymd(period)
)
# Combine inference results
scpi_inference <- scpi_inference |>
mutate(date = ymd(period)) |>
bind_rows(
foo |> filter(time_to_treat == -1) |> filter(name == "Synthetic Mexico") |>
select(-period) |> mutate(lci_ins = value, uci_ins = value, lci_ofs = value, uci_ofs = value)
)
# Plot the results
ggplot() +
scale_color_manual(values = c(color4t, "black")) +
geom_vline(xintercept = amlo_vic_date, linetype = "dotted") +
geom_vline(xintercept = naim_canc_date - 29) +
scale_x_date(date_breaks = "2 month", date_labels = "%b %y") +
scale_y_continuous(breaks = seq(50, 130, 2.5)) +
labs(x = "", y = "Monthly Economic Activity Index\n(Index base October 2018)", color = "", fill = "") +
annotate("text", x = amlo_vic_date, y = -Inf, label = "Elections", angle = 90, size = 2, vjust = -0.5, hjust = -0.1) +
annotate("text", x = naim_canc_date - 29, y = -Inf, label = "NAIM cancellation", angle = 90, size = 2, vjust = 1.5, hjust = -0.1) +
geom_ribbon(data = scpi_inference, alpha = .66, aes(x = date, ymin = exp(lci_ins), ymax = exp(uci_ins), fill = "95% In-sample PI")) +
geom_ribbon(data = scpi_inference, alpha = .5, aes(x = date, ymin = exp(lci_ofs), ymax = exp(uci_ofs), fill = "90% Out-of-sample PI")) +
scale_fill_manual(values = c("grey70", "grey")) +
geom_line(data = foo, aes(date, exp(value), color = name)) +
guides(color = guide_legend(nrow = 1, byrow = TRUE), fill = guide_legend(nrow = 1, byrow = TRUE)) +
annotate("label", x = amlo_vic_date - 30, y = Inf, vjust = 1, size = 2, hjust = 1, color = "black", label = str_c("RMSPE: ", round(rmse_pre, 3))) +
annotate("label", x = naim_canc_date + 30, y = Inf, vjust = 1, size = 2, hjust = 0, color = "black", label = str_c("RMSPE: ", round(rmse_post, 3))) +
coord_cartesian(clip = "off") +
theme(
axis.text.x = element_text(size = 4, angle = 90),
axis.text.y = element_text(size = 8, angle = 0),
axis.title = element_text(size = 8),
legend.text = element_text(size = 5.5),
plot.margin = unit(c(1.5,1,1,1), "lines"),
)
# ------------------------------------------------------------------------------
# Ensure the output directory exists
# ------------------------------------------------------------------------------
output_dir <- "results/Fig1"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Define the treatment date (NAIM cancellation)
time.tr <- "2018-10-29"
time.tr.date <- ymd(time.tr)
# Define the time window around the treatment (7 days before and after)
days <- 7
# ------------------------------------------------------------------------------
# Data Preparation ----
# Filter the data for the currencies and date range of interest
bis_xr_foo <-
bis_xr |>
# Remove 'eur_euro' and 'cad_canadian_dollar' from the analysis
filter(!(currency %in% c("eur_euro", "cad_canadian_dollar"))) |>
# Filter the dataset to include only the 7 days before and after the NAIM cancellation
filter(date >= time.tr.date - days  & date <= time.tr.date + days) |>
group_by(currency) |>
# Mutate the data to add necessary columns for analysis
mutate(
# Take the natural logarithm of the exchange rate for easier interpretation of results
lexr = log(exr),
# Calculate the time relative to the treatment date (in days)
time_to_treat = lubridate::interval(ymd(time.tr.date), date) %/% days(1),
# Define a treatment indicator: 1 if MXN after NAIM cancellation, 0 otherwise
treatment = if_else(currency == "mxn_mexican_peso" & date >= time.tr.date, 1, 0)
) |>
ungroup()
# ------------------------------------------------------------------------------
# Setup for Synthetic DID ----
# Create a panel matrix required for the SDID estimation
setup =
bis_xr_foo |>
# Select relevant columns (currency, time to treatment, log of exchange rate, and treatment)
select(currency, time_to_treat, lexr, treatment) |>
data.frame() |>
# Create matrices for panel estimation
panel.matrices()
# ------------------------------------------------------------------------------
# Synthetic DID Estimation ----
# Estimate the treatment effect using the SDID method
tau.hat = synthdid_estimate(setup$Y, setup$N0, setup$T0)
# Set seed for reproducibility of standard errors
set.seed(123)
# Calculate the standard error using the placebo method
se = sqrt(vcov(tau.hat, method='placebo'))
# Extract the estimated treatment effect and standard error
ex_estimate <- tau.hat[1]
ex_se <- se[1,1]
# ------------------------------------------------------------------------------
# Plotting the Results ----
# Create a plot to visualize the Synthetic DID results
synthdid_plot(
tau.hat, overlay = .999, trajectory.alpha = 1,  # Control the overlay and transparency of the trajectories
control.name = 'Synthetic MXN',                # Name for the synthetic control group
treated.name = 'MXN'                           # Name for the treated group (MXN)
) +
# Label the axes
labs(x = "Relative time to NAIM's cancellation (days)",
y = "MXN to USD (log)") +
# Add an annotation for the treatment effect estimate and its standard error
annotate(
"text", x = -0.5, y = -Inf,
hjust = 0, vjust = -0.5,
color = color4t, size = 3,
label = str_c("Estimate:\n", round(c(tau.hat), 3), " (", round(c(se), 3), ")")
) +
# Customize the x-axis breaks (show days -7 to 7)
scale_x_continuous(breaks = seq(-7, 7)) +
# Customize the color of the plot lines
scale_color_manual(values = c("black", color4t)) +
# Apply a clean theme
ggthemes::theme_clean() +
theme(
legend.position = "bottom",               # Move the legend to the bottom of the plot
legend.text = element_text(size = 10),    # Adjust legend text size
axis.title = element_text(size = 9),      # Adjust axis title text size
plot.background = element_rect(fill = "white", color = "white"),  # Set plot background
legend.background = element_rect(color = NA) # Set legend background
)
# ------------------------------------------------------------------------------
# Saving the Plot (optional) ----
# Uncomment the following lines to save the plot as a PNG file
ggsave(
"results/Fig1/Fig1.png", # File path to save the plot
dpi = 300,                                     # Resolution (DPI)
width = 7.4, height = 4.8                      # Plot dimensions
)
