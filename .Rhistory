title = str_c("Estimate for date: ", period.labels.post[point_in_t]),
subtitle = str_c("Difference between observed and synthetic: ", round(diff, 3))
) +
scale_x_continuous(breaks = as.numeric(levels(factor(sen.dat$t))), labels = levels(factor(sen.dat$lab))) +
theme(plot.title = element_text(size = 10), plot.subtitle = element_text(size = 10))
# Display the plot
plot
# Save the plot as a PNG file
ggsave("results/FigB8/FigB8_Dec19.png", dpi = 300, width = 7.4, height = 4.8)
# ------------------------------------------------------------------------------
# Ensure the output directory exists
# ------------------------------------------------------------------------------
output_dir <- "results/FigB9"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Data Preparation
foo <-
monindex |>
mutate(eaindex_trend = log(eaindex_trend)) |>  # Log-transform the economic activity index trend
filter(date <= ymd("2020-01-01")) |>           # Filter data up to January 2020
filter(countrycode %in% c("ARG", "BRA", "CHL", "COL", "CRI", "HND", "ECU", "MEX", "USA", "CAN")) |>
filter(!is.na(eaindex_trend))                  # Exclude rows with missing data
# Define pre- and post-treatment periods
period.labels <- as.character(levels(factor(foo$date)))
period <- yearmonth(levels(factor(foo$year_month)))
time.tr <- yearmonth("2018 Oct")                 # Set treatment date (NAIM cancellation)
period.pre <- period[-c(match(time.tr, period):length(period))]  # Pre-treatment period
period.post <- period[c(match(time.tr, period):length(period))]  # Post-treatment period
period.labels.post <- period.labels[c(match(time.tr, period):length(period))]
# Add time-to-treatment and treatment variables
foo <-
foo |>
group_by(countrycode) |>
mutate(
time_to_treat = c(seq(-length(period.pre), -1), seq(0, length(period.post) - 1)),
treat = if_else(countrycode == "MEX" & time_to_treat >= 0, 1, 0)  # Define treatment for Mexico post-NAIM
) |>
ungroup() |>
select(countrycode, date, eaindex_trend, treat, time_to_treat) |>
glimpse()
# Check the distribution of time to treatment
table(foo$time_to_treat)
# Estimate the panel model using local projections (lpirfs package)
results_panel_monthly <- lp_lin_panel(
data_set     = foo,
endog_data   = "eaindex_trend",      # Endogenous variable (log of economic activity index)
cumul_mult   = TRUE,                 # Cumulative multiplier
shock        = "treat",              # Treatment shock variable
diff_shock   = TRUE,                 # Use differences in shocks
panel_model  = "within",             # Fixed effects model
panel_effect = "individual",         # Individual-level fixed effects
robust_cov   = "vcovSCC",            # Robust covariance matrix (Driscoll-Kraay)
confint      = 1.96,                 # Confidence interval
hor          = 14                    # Horizon of 14 months
)
# Plot IRFs for monthly data
plot_lin_panel <- plot_lin(results_panel_monthly)
plot(plot_lin_panel[[1]])  # Display the first plot
# Store monthly IRF estimates in a data frame
irf_monthly <- tibble(
time_to_treat = seq(1, length(results_panel_monthly$irf_panel_mean[1,])),
mean = results_panel_monthly$irf_panel_mean[1,],
lci = results_panel_monthly$irf_panel_low[1,],
uci = results_panel_monthly$irf_panel_up[1,]
) |> bind_rows(
tibble(time_to_treat = 0, mean = 0, lci = 0, uci = 0)  # Add time zero
)
# Save IRF estimates to CSV
irf_monthly |> write_csv("results/FigB9/irf_monthly.csv")
# Prepare quarterly data
foo <-
posq |>
filter(countrycode %in% c("ARG", "BRA", "CHL", "COL", "CRI", "HND", "ECU", "MEX", "USA", "CAN")) |>
filter(year >= 2013) |>
filter(year_quarter < yearquarter("2020 Q1")) |>
mutate(
naim = if_else(countrycode == "MEX" & year_quarter >= yearquarter("2018 Q4"), 1, 0),  # Treatment for Mexico
year_quarter = as.character(year_quarter),
gdpi = log(gdpi),          # Log-transform GDP
int_rate = log(int_rate),  # Log-transform interest rate
ex_rate = log(ex_rate)     # Log-transform exchange rate
) |>
select(countrycode, year_quarter, gdpi, int_rate, ex_rate, naim) |>
distinct(countrycode, year_quarter, .keep_all = TRUE)  # Ensure distinct values
# Estimate local projections for quarterly data
results_panel_quarterly <- lp_lin_panel(
data_set     = foo,
endog_data   = "gdpi",            # Endogenous variable (log of GDP)
cumul_mult   = TRUE,
shock        = "naim",            # Treatment shock variable (NAIM cancellation)
diff_shock   = TRUE,
panel_model  = "within",
panel_effect = "individual",
robust_cov   = "vcovNW",          # Robust covariance matrix (Newey-West)
confint      = 1.96,
hor          = 4                  # Horizon of 4 quarters
)
# Plot IRFs for quarterly data
plot_lin_panel <- plot_lin(results_panel_quarterly)
plot(plot_lin_panel[[1]])
# Store quarterly IRF estimates in a data frame
irf_quarterly <- tibble(
time_to_treat = seq(1, length(results_panel_quarterly$irf_panel_mean[1,])),
mean = results_panel_quarterly$irf_panel_mean[1,],
lci = results_panel_quarterly$irf_panel_low[1,],
uci = results_panel_quarterly$irf_panel_up[1,]
) |> bind_rows(
tibble(time_to_treat = 0, mean = 0, lci = 0, uci = 0)
)
# Save IRF estimates to CSV
irf_quarterly |> write_csv("results/FigB9/irf_quarterly.csv")
# Plot Monthly IRF
irf_monthly <- read_csv("results/FigB9/irf_monthly.csv")
irf_monthly |>
ggplot(aes(time_to_treat, mean)) +
geom_hline(yintercept = 0) +
scale_y_continuous(breaks = seq(-.07, .035, .01)) +
scale_x_continuous(breaks = seq(0, 15, 3)) +
labs(x = "Relative time to treatment (months)", y = "ATT", color = "", fill = "") +
theme(axis.text.x = element_text(size = 8, angle = 0)) +
geom_ribbon(alpha = .25, aes(ymin = lci, ymax = uci, fill = "95% CI")) +
scale_fill_manual(values = c("grey", "grey70")) +
geom_line(color = color4t) +
theme(axis.text.y = element_text(size = 9), axis.title = element_text(size = 9), legend.text = element_text(size = 9)) +
coord_cartesian(clip = "off") +
theme(plot.margin = unit(c(1.25, 1, 1, 1), "lines"))
# Save the plot as a PNG file
ggsave("results/FigB9/FigB9a.png", dpi = 300, width = 7.4, height = 4.8)
# Plot Quarterly IRF
irf_quarterly <- read_csv("results/FigB9/irf_quarterly.csv")
irf_quarterly |>
ggplot(aes(time_to_treat, mean)) +
geom_hline(yintercept = 0) +
scale_y_continuous(breaks = seq(-.07, .035, .01)) +
scale_x_continuous(breaks = seq(0, 4, 1)) +
labs(x = "Relative time to treatment (quarters)", y = "ATT", color = "", fill = "") +
theme(axis.text.x = element_text(size = 8, angle = 0)) +
geom_ribbon(alpha = .25, aes(ymin = lci, ymax = uci, fill = "95% CI")) +
scale_fill_manual(values = c("grey", "grey70")) +
geom_line(color = color4t) +
theme(axis.text.y = element_text(size = 9), axis.title = element_text(size = 9), legend.text = element_text(size = 9)) +
coord_cartesian(clip = "off") +
theme(plot.margin = unit(c(1.25, 1, 1, 1), "lines"))
# Save the plot as a PNG file
ggsave("results/FigB9/FigB9b.png", dpi = 300, width = 7.4, height = 4.8)
# ------------------------------------------------------------------------------
# Ensure the output directory exists
# ------------------------------------------------------------------------------
output_dir <- "results/FigB11"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# ------------------------------------------------------------------------------
# Figure B.11: Heterogeneity: Within-Mexico Regions ----
# ------------------------------------------------------------------------------
# Banxico Regionalization
# ------------------------------------------------------------------------------
rnorte <- c("Baja California", "Baja California Sur", "Coahuila de Zaragoza",
"Chihuahua", "Nuevo León", "Sinaloa", "Sonora", "Tamaulipas")
rcentro_norte <- c("Aguascalientes", "Colima", "Durango", "Guanajuato",
"Jalisco", "Nayarit", "San Luis Potosí", "Zacatecas")
rcentro <- c("Ciudad de México", "México")
rcentro_sur <- c("Guerrero", "Hidalgo", "Michoacán de Ocampo",
"Morelos", "Puebla", "Querétaro", "Tlaxcala")
rsur_sureste <- c("Campeche", "Chiapas", "Oaxaca", "Quintana Roo",
"Tabasco", "Veracruz de Ignacio de la Llave", "Yucatán")
# ------------------------------------------------------------------------------
# Economic Activity by State
# ------------------------------------------------------------------------------
rqmex <- read_csv("data/source/INEGI/ITAEE/itaee_indice_desest.csv") |>
janitor::clean_names() |>
pivot_longer(!entidad_federativa) |>
mutate(
year = as.numeric(str_sub(name, 2, 5)),
quarter = str_sub(name, 8),
year_quarter = yearquarter(str_c(year, " Q", quarter), fiscal_start = 1),
date = case_when(
quarter == "1" ~ ymd(str_c(year, "-", "04", "-01")),
quarter == "2" ~ ymd(str_c(year, "-", "07", "-01")),
quarter == "3" ~ ymd(str_c(year, "-", "10", "-01")),
quarter == "4" ~ ymd(str_c(year + 1, "-", "01", "-01"))
),
country =  "MEX",
region = case_when(
entidad_federativa %in% rnorte ~ "North",
entidad_federativa %in% rcentro_norte ~ "Centre-North",
entidad_federativa %in% rcentro ~ "Centre",
entidad_federativa %in% rcentro_sur ~ "Centre-South",
entidad_federativa %in% rsur_sureste ~ "South-Southeasth"
),
amlo_vic = if_else(country == "MEX" & date >= ymd("2018-07-01"), 1, 0),
naim = if_else(country == "MEX" & date >= ymd("2018-11-01"), 1, 0),
covid = if_else(country == "MEX" & date >= ymd("2020-02-01"), 1, 0)
) |>
rename(state = entidad_federativa, eaindex = value) |>
select(-name)
# ------------------------------------------------------------------------------
# Data Preparation
# ------------------------------------------------------------------------------
rqmex <- rqmex |>
filter(year >= 2010, year_quarter < yearquarter("2020 Q1")) |>
left_join(
rqmex |> filter(year == 2018, quarter == 3) |>
select(state, eaindex) |> rename(eaindex_base = eaindex)
) |>
mutate(eaindexi = (eaindex / eaindex_base) * 100) |>
select(-eaindex_base)
rqmex_regions <- rqmex |>
group_by(region, year_quarter) |>
summarise(gdpi = mean(eaindexi)) |>
mutate(countrycode = region) |>
ungroup() |>
mutate(
gdpi = log(gdpi)
)
# ------------------------------------------------------------------------------
# Set SCM Inference Options
# ------------------------------------------------------------------------------
u.alpha  <- 0.05
e.alpha  <- 0.1
rho      <- NULL
rho.max  <- 1
V        <- NULL
u.order  <- 1
u.lags   <- 0
u.sigma  <- "HC1"
u.missp  <- TRUE
e.lags   <- 1
e.order  <- 0
e.method <- "all"
lgapp    <- "linear"
cores    <- parallel::detectCores()
sims     <- 1000
w.constr <- list(name = "simplex")
# ------------------------------------------------------------------------------
# Loop through each region and generate plots
# ------------------------------------------------------------------------------
regions <- levels(factor(rqmex_regions$countrycode))
for (r in regions) {
region <- r
# Prepare data for SCM
foo <- rqmex_regions |>
filter(countrycode == r) |>
left_join(
posq |>
filter(year_quarter < yearquarter("2020 Q1")) |>
filter(countrycode == "MEX") |>
select(year_quarter, ex_rate, int_rate)
) |>
bind_rows(
posq |>
filter(year_quarter >= yearquarter("2010 Q1"),
year_quarter < yearquarter("2020 Q1"),
countrycode != "MEX") |>
filter(countrycode %in% c("ARG", "BRA", "CHL", "COL", "CRI", "HND", "ECU", "USA", "CAN")) |>
select(year_quarter, countrycode, gdpi, ex_rate, int_rate) |>
mutate(
gdpi = log(gdpi),
ex_rate = log(ex_rate),
int_rate = log(int_rate)
)
)
# ------------------------------------------------------------------------------
# Estimation of Residualized GDP (controlling for interest and exchange rates)
# ------------------------------------------------------------------------------
gdpi_res <- feols(gdpi ~ (ex_rate) + (int_rate), foo)  # Estimate residuals from log GDP on exchange rate and interest rate
foo <- foo |> mutate(gdpi_res = residuals(gdpi_res))  # Create new residualized GDP column
# ------------------------------------------------------------------------------
# Defining Pre- and Post-Treatment Periods for SCM
# ------------------------------------------------------------------------------
period <- yearquarter(levels(factor(foo$year_quarter)))
time.tr <- yearquarter("2018 Q4")
period.pre  <- period[-c(match(time.tr, period):length(period))]
period.post <- period[c(match(time.tr, period):length(period))]
foo <- foo |>
group_by(countrycode) |>
mutate(time_to_treat_naim = c(seq(-length(period.pre), -1), seq(0, length(period.post) - 1))) |>
ungroup()
period <- as.numeric(levels(factor(foo$time_to_treat_naim)))
# ------------------------------------------------------------------------------
# Set Options for Data Preparation for SCM
# ------------------------------------------------------------------------------
time.tr <- 0
id.var      <- "countrycode"                             # ID variable
time.var    <- "time_to_treat_naim"                                # Time variable
period.pre  <- period[-c(match(time.tr, period):length(period))]   # Pre-treatment period
period.post <- period[c(match(time.tr, period):length(period))]                          # Post-treatment period
outcome.var <- "gdpi_res"                                 # Outcome variable
cov.adj     <- NULL #list(c("constant"))     # Covariates for adjustment
features    <- NULL                                  # No features other than outcome
constant    <- T                                 # Constant term
report.missing <- FALSE                              # To check where missing values are
cointegrated.data <- TRUE                            # Belief that the data are cointegrated
unit.tr <- r                                      # Treated unit (in terms of id.var)
unit.co <- unique(foo$countrycode)[-match(unit.tr, unique(foo$countrycode))]                    # Donors pool
unit.co <- unit.co[!unit.co == region]
# ------------------------------------------------------------------------------
# Set SCM Estimation Options and Run SCM Model
# ------------------------------------------------------------------------------
df <- scdata(df = foo, id.var = id.var, time.var = time.var, outcome.var = outcome.var,
period.pre = period.pre, period.post = period.post,
unit.tr = unit.tr, unit.co = unit.co, constant = TRUE, cointegrated.data = TRUE)
set.seed(1234)
model <- scpi(w.constr = w.constr, data = df, u.order = u.order, u.lags = u.lags, u.sigma = u.sigma,
u.missp = u.missp, sims = sims, e.order = e.order, e.lags = e.lags, e.method = e.method,
cores = cores, u.alpha = u.alpha, e.alpha = e.alpha, rho = rho, rho.max = rho.max)
# ------------------------------------------------------------------------------
# Save SCM Results: Estimates, Inference, and Weights
# ------------------------------------------------------------------------------
path <- "results/FigB11/"
scpi_estimates <- sc_est(model, outcome.var, period, period)
scpi_inference <- sc_inf(model, post_tr = period.post, period_labels = period)
write_csv(scpi_estimates, str_c(path, "/", r, "_scpi_estimates.csv"))
write_csv(scpi_inference, str_c(path, "/", r, "_scpi_inference.csv"))
weights <- tibble(
weights = round(model$est.results$w, 4),
country = str_remove(names(model$est.results$w), str_c(unit.tr, "."))
)
write_csv(weights, str_c(path, "/", r, "_scpi_weights.csv"))
# ------------------------------------------------------------------------------
# Calculate MSE and RMSE
# ------------------------------------------------------------------------------
# MSE
mse <-
scpi_estimates |>
filter(name == "diff") |>
mutate(
mse = value^2,
)
mse_pre <- (mse |> filter(time_to_treat < 0) |> summarise(mse = sum(mse)))$mse
mse_post <- (mse |> filter(time_to_treat >= 0) |> summarise(mse = sum(mse)))$mse
rmse_pre <- sqrt(mse_pre/(nrow(mse |> filter(time_to_treat < 0)) + 1))
rmse_post <- sqrt(mse_post/(nrow(mse |> filter(time_to_treat >= 0)) + 1))
ratio <- rmse_post/rmse_pre
# ------------------------------------------------------------------------------
# Prepare Data for SCM Plot
# ------------------------------------------------------------------------------
unit_name = r
outcome_name = "Quarterly GDP index (log, residualized)"
foo <-
scpi_estimates |>
filter(!(name %in% c("diff", "lci", "uci"))) |>
mutate(name = if_else(name == "obs", str_c("Observed ", unit_name),  str_c("Synthetic ", unit_name)))
labels <-
scpi_estimates |>
filter(time_to_treat %% 2 != 1) |>
group_by(time_to_treat, period) |>
summarise() |>
ungroup()
min_y <- exp((min(((scpi_estimates |> filter(name == "obs"))$value))))
max_y <- exp(round(max((scpi_inference$uci))))
# Data frame
foo <-
scpi_estimates |>
filter(!(name %in% c("diff", "lci", "uci"))) |>
mutate(
name = if_else(name == "obs", str_c("Observed ", r, " Region"), str_c("Synthetic ", r, " Region")),
date = yearquarter(period)
)
labels <-
scpi_estimates |>
filter(time_to_treat %% 2 != 1) |>
group_by(time_to_treat, period) |>
summarise() |>
ungroup()
scpi_inference <-
scpi_inference |>
mutate(
date = yearquarter(period),
) |>
bind_rows(
foo |>
filter(time_to_treat == -1) |>
filter(name == str_c("Synthetic ", r, " Region")) |>
select(-period) |>
mutate(
lci_ins = value,
uci_ins = value,
lci_ofs = value,
uci_ofs = value,
)
)
# Levels
foo |>
ggplot() +
# Colors
scale_color_manual(values = c(color4t, "black")) +
# Vertical Lines
geom_vline(xintercept = -1, linetype = "dotted") +
geom_vline(xintercept = 0) +
labs(x = "", y = outcome_name, color = "", fill = "") +
scale_x_continuous(
breaks = labels$time_to_treat,
labels = labels$period
) +
theme(
axis.text.x = element_text(size = 6, angle = 0),
axis.text.y = element_text(size = 12, angle = 0),
) +
annotate("text", x = -1,
y= -Inf, label="Elections",
angle = 90, size = 2,
vjust=-0.5, hjust= -0.1
) +
annotate("text", x = 0,
y = -Inf, label="NAIM cancelation",
angle = 90, size = 2,
vjust=1.5, hjust= -0.1
)  +
# In-sample
geom_ribbon(
data = scpi_inference,
alpha = .66,
aes(x = time_to_treat, ymin = exp(lci_ins), ymax = exp(uci_ins), fill = "95% In-sample PI"),
) +
# Out-of-sample
geom_ribbon(
data = scpi_inference,
alpha = .5,
aes(x = time_to_treat, ymin = exp(lci_ofs), ymax = exp(uci_ofs), fill = "90% Out-of-sample PI"),
) +
scale_fill_manual(values=c("grey", "grey70")) +
# Observed vs Synthetic
geom_line(aes(time_to_treat, exp(value), color = name)) +
theme(
axis.text.x = element_text(size = 6, angle = 0),
axis.text.y = element_text(size = 8, angle = 0),
axis.title = element_text(size = 8),
legend.text = element_text(size = 6),
plot.margin = unit(c(1.5,1,1,1), "lines"),
) +
guides(
color = guide_legend(nrow=1,byrow=TRUE),
fill = guide_legend(nrow=1,byrow=TRUE)
) +
# RMSPE
annotate(
"label", x = -1, y = Inf, vjust = 0,
size = 2, hjust = 1.1, color="black",
label = str_c("RMSPE: ", round(rmse_pre, 3))
) +
annotate(
"label", x = 0, y = Inf, vjust = 0,
size = 2, hjust = -0.1, color="black",
label = str_c("RMSPE: ", round(rmse_post, 3))
) +
coord_cartesian(clip = "off")
ggsave(str_c("results/FigB11/FigB11_", region, ".png"), dpi = 300)
}
# ------------------------------------------------------------------------------
# Ensure the output directory exists
# ------------------------------------------------------------------------------
output_dir <- "results/FigB11"
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# ------------------------------------------------------------------------------
# Figure B.11: Heterogeneity: Within-Mexico Regions ----
# ------------------------------------------------------------------------------
# Banxico Regionalization
# ------------------------------------------------------------------------------
rnorte <- c("Baja California", "Baja California Sur", "Coahuila de Zaragoza",
"Chihuahua", "Nuevo León", "Sinaloa", "Sonora", "Tamaulipas")
rcentro_norte <- c("Aguascalientes", "Colima", "Durango", "Guanajuato",
"Jalisco", "Nayarit", "San Luis Potosí", "Zacatecas")
rcentro <- c("Ciudad de México", "México")
rcentro_sur <- c("Guerrero", "Hidalgo", "Michoacán de Ocampo",
"Morelos", "Puebla", "Querétaro", "Tlaxcala")
rsur_sureste <- c("Campeche", "Chiapas", "Oaxaca", "Quintana Roo",
"Tabasco", "Veracruz de Ignacio de la Llave", "Yucatán")
# ------------------------------------------------------------------------------
# Economic Activity by State
# ------------------------------------------------------------------------------
rqmex <- read_csv("data/source/INEGI/ITAEE/itaee_indice_desest.csv") |>
janitor::clean_names() |>
pivot_longer(!entidad_federativa) |>
mutate(
year = as.numeric(str_sub(name, 2, 5)),
quarter = str_sub(name, 8),
year_quarter = yearquarter(str_c(year, " Q", quarter), fiscal_start = 1),
date = case_when(
quarter == "1" ~ ymd(str_c(year, "-", "04", "-01")),
quarter == "2" ~ ymd(str_c(year, "-", "07", "-01")),
quarter == "3" ~ ymd(str_c(year, "-", "10", "-01")),
quarter == "4" ~ ymd(str_c(year + 1, "-", "01", "-01"))
),
country =  "MEX",
region = case_when(
entidad_federativa %in% rnorte ~ "North",
entidad_federativa %in% rcentro_norte ~ "Centre-North",
entidad_federativa %in% rcentro ~ "Centre",
entidad_federativa %in% rcentro_sur ~ "Centre-South",
entidad_federativa %in% rsur_sureste ~ "South-Southeasth"
),
amlo_vic = if_else(country == "MEX" & date >= ymd("2018-07-01"), 1, 0),
naim = if_else(country == "MEX" & date >= ymd("2018-11-01"), 1, 0),
covid = if_else(country == "MEX" & date >= ymd("2020-02-01"), 1, 0)
) |>
rename(state = entidad_federativa, eaindex = value) |>
select(-name)
# ------------------------------------------------------------------------------
# Data Preparation
# ------------------------------------------------------------------------------
rqmex <- rqmex |>
filter(year >= 2010, year_quarter < yearquarter("2020 Q1")) |>
left_join(
rqmex |> filter(year == 2018, quarter == 3) |>
select(state, eaindex) |> rename(eaindex_base = eaindex)
) |>
mutate(eaindexi = (eaindex / eaindex_base) * 100) |>
select(-eaindex_base)
